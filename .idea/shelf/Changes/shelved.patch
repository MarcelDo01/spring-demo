Index: src/main/java/de/berlin/htw/webtech/demo/CreatingController.java
===================================================================
diff --git a/src/main/java/de/berlin/htw/webtech/demo/CreatingController.java b/src/main/java/de/berlin/htw/webtech/demo/CreatingController.java
deleted file mode 100644
--- a/src/main/java/de/berlin/htw/webtech/demo/CreatingController.java	(revision 0b7b67d69a4b75d0d873e288bb46ff115dd043ff)
+++ /dev/null	(revision 0b7b67d69a4b75d0d873e288bb46ff115dd043ff)
@@ -1,16 +0,0 @@
-package de.berlin.htw.webtech.demo;
-import java.util.concurrent.atomic.AtomicLong;
-
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RestController;
-
-@RestController
-public class CreatingController {
-
-
-    @GetMapping("/greeting")
-    public String greeting(@RequestParam(value = "name",required = false, defaultValue = "World" ) String name) {
-        return  "Hello " + name;
-    }
-}
Index: src/main/java/Objects/ThingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Objects;\r\n\r\nimport Objects.Thing;\r\nimport Objects.ThingRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class ThingService {\r\n\r\n    @Autowired\r\n    ThingRepository repo;\r\n\r\n    public Thing save(Thing thing) {\r\n        return repo.save(thing);\r\n    }\r\n\r\n    public Thing get(Long id) {\r\n        return repo.findById(id).orElseThrow(() -> new RuntimeException());\r\n    }\r\n\r\n    public List<Thing> getAll() {\r\n        Iterable<Thing> iterator = repo.findAll();\r\n        List<Thing> things = new ArrayList<Thing>();\r\n        for (Thing thing : iterator)  things.add(thing);\r\n        return things;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Objects/ThingService.java b/src/main/java/Objects/ThingService.java
--- a/src/main/java/Objects/ThingService.java	(revision 0b7b67d69a4b75d0d873e288bb46ff115dd043ff)
+++ b/src/main/java/Objects/ThingService.java	(date 1684083305522)
@@ -1,7 +1,5 @@
 package Objects;
 
-import Objects.Thing;
-import Objects.ThingRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
@@ -14,18 +12,18 @@
     @Autowired
     ThingRepository repo;
 
-    public Thing save(Thing thing) {
+    public ThingEntity save(ThingEntity thing) {
         return repo.save(thing);
     }
 
-    public Thing get(Long id) {
+    public ThingEntity get(Long id) {
         return repo.findById(id).orElseThrow(() -> new RuntimeException());
     }
 
-    public List<Thing> getAll() {
-        Iterable<Thing> iterator = repo.findAll();
-        List<Thing> things = new ArrayList<Thing>();
-        for (Thing thing : iterator)  things.add(thing);
+    public List<ThingEntity> getAll() {
+        Iterable<ThingEntity> iterator = repo.findAll();
+        List<ThingEntity> things = new ArrayList<ThingEntity>();
+        for (ThingEntity thing : iterator)  things.add(thing);
         return things;
     }
 }
Index: src/main/java/Objects/ThingController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Objects;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\npublic class ThingController {\r\n\r\n    @Autowired\r\n    ThingService service;\r\n\r\n    Logger logger = LoggerFactory.getLogger(ThingController.class);\r\n\r\n    @PostMapping(\"/things\")\r\n    public Thing createThing(@RequestBody Thing thing) {\r\n        return service.save(thing);\r\n    }\r\n\r\n    @GetMapping(\"/things/{id}\")\r\n    public Thing getThing(@PathVariable String id) {\r\n        logger.info(\"GET request on route things with {}\", id);\r\n        Long thingId = Long.parseLong(id);\r\n        return service.get(thingId);\r\n    }\r\n\r\n    @GetMapping(\"/things\")\r\n    public List<Thing> getAllThings() {\r\n        return service.getAll();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Objects/ThingController.java b/src/main/java/Objects/ThingController.java
--- a/src/main/java/Objects/ThingController.java	(revision 0b7b67d69a4b75d0d873e288bb46ff115dd043ff)
+++ b/src/main/java/Objects/ThingController.java	(date 1684087480366)
@@ -3,8 +3,10 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
 
+import java.util.ArrayList;
 import java.util.List;
 
 @RestController
@@ -16,20 +18,20 @@
     Logger logger = LoggerFactory.getLogger(ThingController.class);
 
     @PostMapping("/things")
-    public Thing createThing(@RequestBody Thing thing) {
+    public ThingEntity createThing(@RequestBody ThingEntity thing) {
         return service.save(thing);
     }
 
     @GetMapping("/things/{id}")
-    public Thing getThing(@PathVariable String id) {
+    public ThingEntity getThing(@PathVariable String id) {
         logger.info("GET request on route things with {}", id);
         Long thingId = Long.parseLong(id);
         return service.get(thingId);
     }
 
-    @GetMapping("/things")
-    public List<Thing> getAllThings() {
-        return service.getAll();
+    @GetMapping("/api/v1/things")
+    public List<ThingEntity> getAllThings() {
+         return service.getAll();
     }
 
 }
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Compiled class file\r\n*.class\r\n\r\n# Log file\r\n*.log\r\n\r\n### H2 DB ###\r\n*.mv.db\r\n*.trace.db\r\n\r\n\r\n# BlueJ files\r\n*.ctxt\r\n\r\n# Mobile Tools for Java (J2ME)\r\n.mtj.tmp/\r\n\r\n# Package Files #\r\n*.jar\r\n*.war\r\n*.nar\r\n*.ear\r\n*.zip\r\n*.tar.gz\r\n*.rar\r\n\r\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\r\nhs_err_pid*\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 0b7b67d69a4b75d0d873e288bb46ff115dd043ff)
+++ b/.gitignore	(date 1684086462517)
@@ -8,6 +8,9 @@
 *.mv.db
 *.trace.db
 
+### STS ###
+.apt_generated
+.classpath
 
 # BlueJ files
 *.ctxt
Index: src/main/java/Objects/ThingRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Objects;\r\n\r\nimport Objects.Thing;\r\nimport org.springframework.data.repository.CrudRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface ThingRepository extends CrudRepository<Thing, Long> { }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Objects/ThingRepository.java b/src/main/java/Objects/ThingRepository.java
--- a/src/main/java/Objects/ThingRepository.java	(revision 0b7b67d69a4b75d0d873e288bb46ff115dd043ff)
+++ b/src/main/java/Objects/ThingRepository.java	(date 1684084079210)
@@ -1,8 +1,12 @@
 package Objects;
 
-import Objects.Thing;
 import org.springframework.data.repository.CrudRepository;
 import org.springframework.stereotype.Repository;
 
+import java.util.List;
+
 @Repository
-public interface ThingRepository extends CrudRepository<Thing, Long> { }
+public interface ThingRepository extends CrudRepository<ThingEntity, Long> {
+
+
+}
Index: src/main/resources/import.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/import.sql b/src/main/resources/import.sql
new file mode 100644
--- /dev/null	(date 1684082533701)
+++ b/src/main/resources/import.sql	(date 1684082533701)
@@ -0,0 +1,1 @@
+INSERT INTO Things (id, name, price) VALUES (1, "Flasche", 2), (2, "Brot", 1), (3, "Schinken", 3)
\ No newline at end of file
Index: .github/workflows/tests.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml
new file mode 100644
--- /dev/null	(date 1683557950857)
+++ b/.github/workflows/tests.yml	(date 1683557950857)
@@ -0,0 +1,16 @@
+name: CI
+
+on: [ push ]
+
+jobs:
+  test:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v2
+      - name: Set up JDK 16
+        uses: actions/setup-java@v2
+        with:
+          distribution: "adopt"
+          java-version: 16
+      - name: clean build
+        run: ./gradlew clean test --info --stacktrace
\ No newline at end of file
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nspring.datasource.url=jdbc:h2:file:/Users/hieu_/OneDrive/Desktop/Webtech/demo\r\nspring.datasource.username=${DATASOURCE_USERNAME}\r\nspring.datasource.password=${DATASOURCE_PASSWORD}\r\nspring.datasource.driverClassName=org.h2.Driver\r\nspring.h2.console.enabled=true\r\nspring.h2.console.path=/db-console\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect\r\nspring.jpa.properties.hibernate.jdbc.time_zone=UTC\r\nspring.jpa.show-sql=true\r\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.open-in-view=false\r\nspring.sql.init.platform=h2\r\nspring.sql.init.mode=always
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 0b7b67d69a4b75d0d873e288bb46ff115dd043ff)
+++ b/src/main/resources/application.properties	(date 1684091745412)
@@ -1,5 +1,5 @@
 
-spring.datasource.url=jdbc:h2:file:/Users/hieu_/OneDrive/Desktop/Webtech/demo
+spring.datasource.url=jdbc:h2:file:/Users/hieu_/spring-demo/Database
 spring.datasource.username=${DATASOURCE_USERNAME}
 spring.datasource.password=${DATASOURCE_PASSWORD}
 spring.datasource.driverClassName=org.h2.Driver
@@ -12,4 +12,4 @@
 spring.jpa.hibernate.ddl-auto=update
 spring.jpa.open-in-view=false
 spring.sql.init.platform=h2
-spring.sql.init.mode=always
\ No newline at end of file
+spring.sql.init.mode=always
Index: src/main/java/Objects/Thing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Objects/Thing.java b/src/main/java/Objects/ThingEntity.java
rename from src/main/java/Objects/Thing.java
rename to src/main/java/Objects/ThingEntity.java
--- a/src/main/java/Objects/Thing.java	(revision 0b7b67d69a4b75d0d873e288bb46ff115dd043ff)
+++ b/src/main/java/Objects/ThingEntity.java	(date 1684083552005)
@@ -3,16 +3,22 @@
 import jakarta.persistence.*;
 
 @Entity
-public class Thing {
+@Table(name = "Things")
+public class ThingEntity {
+
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
+
+    @Column(name = "id")
     private Long id;
+    @Column(name="name", nullable = false)
     private String name;
+    @Column(name="price",nullable = false)
     private int price;
 
-    public Thing() {}
+    protected ThingEntity() {}
 
-    public Thing(String name, int price) {
+    public ThingEntity(String name, int price) {
         this.name = name;
         this.price = price;
     }
@@ -21,9 +27,6 @@
         return id;
     }
 
-    public void setId(Long id) {
-        this.id = id;
-    }
 
     public String getName() {
         return name;
@@ -44,9 +47,9 @@
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
-        if (!(o instanceof Thing)) return false;
+        if (!(o instanceof ThingEntity)) return false;
 
-        Thing thing = (Thing) o;
+        ThingEntity thing = (ThingEntity) o;
 
         if (getPrice() != thing.getPrice()) return false;
         if (getId() != null ? !getId().equals(thing.getId()) : thing.getId() != null) return false;
